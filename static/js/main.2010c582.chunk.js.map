{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","id","classNames","completed","title","TodoList","todos","map","username","todosWithUsers","userId","usersFromServer","find","App","useState","setTodos","newTitle","setNewTitle","selectedUser","setSelectedUser","emptyTitleError","setEmptyTitleError","emptyUserError","setemptyUserError","action","method","onSubmit","event","preventDefault","trimTitle","trim","newTodo","Math","max","curTodos","htmlFor","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2010c582.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types/user';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const {\n    name,\n    email,\n  } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { TodosWithUsers } from '../../types/todosWithUsers';\n\ntype Props = {\n  todo: TodosWithUsers;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    className={classNames('TodoInfo', {\n      'TodoInfo--completed': todo.completed,\n    })}\n  >\n    <h2 className=\"TodoInfo__title\">\n      {todo.title}\n    </h2>\n\n    {todo.user && (\n      <UserInfo user={todo.user} />\n    )}\n  </article>\n);\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { TodosWithUsers } from '../../types/todosWithUsers';\n\ntype Props = {\n  todos: TodosWithUsers[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo\n        todo={todo}\n        key={todo.id}\n      />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { TodosWithUsers } from './types/todosWithUsers';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nexport const todosWithUsers: TodosWithUsers[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: usersFromServer.find(user => user.id === todo.userId) || null,\n}));\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<TodosWithUsers[]>(todosWithUsers);\n  const [newTitle, setNewTitle] = useState('');\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [emptyTitleError, setEmptyTitleError] = useState(false);\n  const [emptyUserError, setemptyUserError] = useState(false);\n\n  const getBigestId = () => {\n    return Math.max(...(todos.map(todo => todo.id))) + 1;\n  };\n\n  const resetForm = () => {\n    setNewTitle('');\n    setSelectedUser(0);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    const trimTitle = newTitle.trim();\n\n    setEmptyTitleError(!trimTitle);\n    setemptyUserError(!selectedUser);\n\n    if (!trimTitle || !selectedUser) {\n      return;\n    }\n\n    const newTodo: TodosWithUsers = {\n      id: getBigestId(),\n      title: trimTitle,\n      completed: false,\n      userId: selectedUser,\n      user: usersFromServer.find(user => user.id === selectedUser) || null,\n    };\n\n    setTodos(curTodos => [...curTodos, newTodo]);\n    resetForm();\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTitle(event.target.value);\n  };\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUser(+event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            type=\"text\"\n            placeholder=\"Enter a title\"\n            data-cy=\"titleInput\"\n            id=\"title\"\n            value={newTitle}\n            onChange={handleTitleChange}\n          />\n          {!newTitle && emptyTitleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"userSelect\"\n            value={selectedUser}\n            onChange={handleSelect}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n\n            {usersFromServer.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n          {!selectedUser && emptyUserError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}